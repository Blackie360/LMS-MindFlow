generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id            String   @id @default(cuid())
  sessionToken  String   @unique
  userId        String
  expires       DateTime
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String       @unique
  emailVerified DateTime?
  image         String?
  password      String?      // For credentials provider
  role          Role         @default(STUDENT)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  accounts      Account[]
  sessions      Session[]
  courses       Course[]     @relation("InstructorCourses")
  enrollments   Enrollment[]
  courseInvitations CourseInvitation[] @relation("UserCourseInvitations")
  
  // Organization relationships
  organizationMemberships Member[]
  organizationInvitations Invitation[] @relation("UserOrganizationInvitations")
  teamMemberships TeamMember[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Organization model (represents schools)
model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  logo        String?  // Better Auth uses 'logo' instead of 'image'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  metadata    Json?    // Better Auth metadata field
  
  // Custom fields for schools
  schoolCode      String?
  departmentCode  String?
  subscriptionTier String @default("basic")
  maxTeams        Int    @default(5)
  maxMembersPerTeam Int  @default(50)
  branding        Json?  // Store logo, colors, etc.
  
  // Relationships
  members    Member[]
  teams      Team[]
  courses    Course[]
  invitations Invitation[]
  roles      OrganizationRole[]
  createdBy  String

  @@map("organization")
}

// Organization member model (Better Auth organization plugin)
model Member {
  id             String   @id @default(cuid())
  organizationId String
  userId         String
  role           String   // admin, leadInstructor, instructor, student
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Custom fields for LMS
  department     String?
  grade          String?
  enrollmentDate DateTime @default(now())
  status         String   @default("active")
  
  // Relationships
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([organizationId, userId])
  @@map("member")
}

// Team model (represents departments or classes within a school)
model Team {
  id             String   @id @default(cuid())
  name           String
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Custom fields for teams
  departmentCode String?
  maxMembers     Int      @default(50)
  category       String?
  description    String?
  
  // Relationships
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  members       TeamMember[]
  createdBy     String?
  
  @@map("team")
}

// Team member model
model TeamMember {
  id             String   @id @default(cuid())
  teamId         String
  userId         String   // Better Auth uses userId directly
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relationships
  team   Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([teamId, userId])
  @@map("teamMember")
}

// Organization invitation model (Better Auth organization plugin)
model Invitation {
  id             String   @id @default(cuid())
  organizationId String
  email          String
  role           String
  inviterId      String   // Better Auth uses inviterId
  expiresAt      DateTime
  createdAt      DateTime @default(now())
  acceptedAt     DateTime?
  status         String   @default("pending") // Better Auth status field
  
  // Custom fields for invitations
  department     String?
  teamId         String?
  
  // Relationships
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  inviter       User         @relation("UserOrganizationInvitations", fields: [inviterId], references: [id], onDelete: Cascade)
  
  @@map("invitation")
}

// Organization role model for dynamic access control
model OrganizationRole {
  id             String   @id @default(cuid())
  organizationId String
  role           String
  permission     Json     // Store permissions as JSON
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relationships
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@unique([organizationId, role])
  @@map("organizationRole")
}

model Course {
  id          String       @id @default(cuid())
  title       String
  description String?
  thumbnail   String?
  status      CourseStatus @default(DRAFT)
  createdBy   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  // Organization relationship
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  
  instructor  User         @relation("InstructorCourses", fields: [createdBy], references: [id], onDelete: Cascade)
  enrollments Enrollment[]
  modules     Module[]
  invitations CourseInvitation[]

  @@map("courses")
}

model Module {
  id       String   @id @default(cuid())
  courseId String
  title    String
  order    Int
  lessons  Lesson[]
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("modules")
}

model Lesson {
  id                String             @id @default(cuid())
  moduleId          String
  title             String
  content           String?
  videoUrl          String?
  order             Int
  lessonCompletions LessonCompletion[]
  module            Module             @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@map("lessons")
}

model Enrollment {
  id         String   @id @default(cuid())
  courseId   String
  studentId  String
  enrolledAt DateTime @default(now())
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  student    User     @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([courseId, studentId])
  @@map("enrollments")
}

model LessonCompletion {
  id          String   @id @default(cuid())
  lessonId    String
  studentId   String
  completedAt DateTime @default(now())
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([lessonId, studentId])
  @@map("lesson_completions")
}

// Course invitation model (separate from organization invitations)
model CourseInvitation {
  id            String    @id @default(cuid())
  email         String
  role          Role      @default(STUDENT)
  courseId      String?
  invitedBy     String
  token         String    @unique
  expiresAt     DateTime
  createdAt     DateTime  @default(now())
  acceptedAt    DateTime?
  course        Course?   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  invitedByUser User      @relation("UserCourseInvitations", fields: [invitedBy], references: [id], onDelete: Cascade)

  @@map("course_invitations")
}

enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
  SUPER_ADMIN
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}
