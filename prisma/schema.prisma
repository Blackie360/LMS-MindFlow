// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts    Account[]
  sessions    Session[]
  courses     Course[]     @relation("InstructorCourses")
  enrollments Enrollment[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  thumbnail   String?
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  instructor  User         @relation("InstructorCourses", fields: [createdBy], references: [id], onDelete: Cascade)
  modules     Module[]
  enrollments Enrollment[]

  @@map("courses")
}

model Module {
  id       String @id @default(cuid())
  courseId String
  title    String
  order    Int
  
  course  Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons Lesson[]

  @@map("modules")
}

model Lesson {
  id       String  @id @default(cuid())
  moduleId String
  title    String
  content  String? @db.Text
  videoUrl String?
  order    Int

  module             Module             @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  lessonCompletions LessonCompletion[]

  @@map("lessons")
}

model Enrollment {
  id         String   @id @default(cuid())
  courseId   String
  studentId  String
  enrolledAt DateTime @default(now())

  course  Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  student User   @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([courseId, studentId])
  @@map("enrollments")
}

model LessonCompletion {
  id          String   @id @default(cuid())
  lessonId    String
  studentId   String
  completedAt DateTime @default(now())

  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([lessonId, studentId])
  @@map("lesson_completions")
}

enum Role {
  STUDENT
  INSTRUCTOR
}
